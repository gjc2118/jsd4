var chai = require('chai');
var chaiAsPromised = require('chai-as-promised');
var expect = require('chai').expect;
var assert = require('chai').assert;
var should = require('chai').should();
var sinon = require('sinon');
var Request = require('../lib/request');

chai.use(chaiAsPromised);

describe('Request', function() {
  var request;
  var auth;
  var siteid = 123;
  var apikey = 'abc';

  beforeEach(function() {
    request = new Request(siteid, apikey);
    auth = 'Basic ' + new Buffer(request.siteid + ':' + request.apikey).toString('base64');
  });

  describe('#constructor', function() {
    it('sets siteid and apikey', function() {
      request.siteid.should.equal(123);
      request.apikey.should.equal('abc');
    });

    it('sets the auth property to a Basic Authorization type', function() {
      request.auth.should.equal(auth);
    });
  });

  describe('#options', function() {
    it('returns an Object of options to be passed to the request', function() {
      var uri = 'https://track.customer.io/api/v1/customers/1';

      var expectedOptions = {
        headers: { Authorization: auth, 'Content-Type': 'application/json' },
        uri: uri,
        timeout: 10000,
        method: 'POST'
      }

      var resultOptions = request.options(uri, 'POST');

      assert.deepEqual(resultOptions, expectedOptions);
    });
  });

  describe('#handler', function() {
    var uri;
    var data;
    var options;

    beforeEach(function() {
      uri = 'https://track.customer.io/api/v1/customers/1';
      data = { first_name: 'Bruce', last_name: 'Wayne' };
      options = {
        method: 'PUT',
        uri: uri,
        headers: {
          'Authorization': auth,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data),
        timeout: 10000
      };
    });

    it('returns a promise', function() {
      var promise = request.handler(options);

      request._request = function(){};

      assert.isFunction(promise.then);
      assert.isFunction(promise['catch']);
    });

    it('makes a request and resolves a promise on success', function() {
      var body = {};

      request._request = function(options, callback) {
        var response = {
          statusCode: 200
        };
        callback(null, response, JSON.stringify(body));
      };

      return request.handler(options).should.eventually.deep.equal(body);
    });

    it('makes a request and rejects with an error on failure', function() {
      options.uri = 'https://track.customer.io/api/v1/customers/1/events';
      options.data = JSON.stringify({ title: 'The Batman' });

      var message = 'test error message';
      var body = {
        "meta": {
          "error": message
        }
      };

      request._request = function(options, callback) {
        var response = {
          statusCode: 400
        };
        callback(null, response, JSON.stringify(body));
      };

      return request.handler(options).should.be.rejectedWith(message);
    });
  });

  describe('#put', function() {
    var uri;
    var options;
    var data;

    beforeEach(function() {
      uri = 'https://track.customer.io/api/v1/customers/1';
      data = { first_name: 'Bruce', last_name: 'Wayne' };
      options = {
        method: 'PUT',
        uri: uri,
        headers: {
          'Authorization': auth,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data),
        timeout: 10000
      };
    });

    it('it calls the handler, making a PUT request with the correct arguments', function() {
      sinon.stub(request, 'handler');

      request.put(uri, data);

      assert.ok(request.handler.calledWith(options));
    });

    it('returns the promise generated by the handler', function() {
        var promise = request.put(uri, data);

        assert.isFunction(promise.then);
        assert.isFunction(promise['catch']);
    });
  });

  describe('#destroy', function() {
    var uri;
    var options;

    beforeEach(function() {
      uri = 'https://track.customer.io/api/v1/customers/1';
      options = {
        method: 'DELETE',
        uri: uri,
        headers: {
          'Authorization': auth,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      };
    });

    it('it calls the handler, making a DELETE request with the correct arguments', function() {
      sinon.stub(request, 'handler');

      request.destroy(uri);

      assert.ok(request.handler.calledWith(options));
    });

    it('returns the promise generated by the handler', function() {
        var promise = request.destroy(uri);

        assert.isFunction(promise.then);
        assert.isFunction(promise['catch']);
    });
  });

  describe('#post', function() {
    var uri;
    var options;
    var data;

    beforeEach(function() {
      uri = 'https://track.customer.io/api/v1/customers/1/events';
      data = { name: 'plan_updated', data: { plan: 'free' } };
      options = {
        method: 'POST',
        uri: uri,
        headers: {
          'Authorization': auth,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data),
        timeout: 10000
      };
    });

    it('it calls the handler, making a POST request with the correct arguments', function() {
      sinon.stub(request, 'handler');

      request.post(uri, data);

      assert.ok(request.handler.calledWith(options));
    });

    it('returns the promise generated by the handler', function() {
        var promise = request.post(uri);

        assert.isFunction(promise.then);
        assert.isFunction(promise['catch']);
    });
  });
});

